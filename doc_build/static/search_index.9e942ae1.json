[{"id":1,"title":"Overview","content":"","routePath":"/js/","lang":"","toc":[],"domain":"","frontmatter":{"overview":true,"title":"Overview"},"version":""},{"id":2,"title":"阅读杂记JS","content":"一共有哪些数据类型#\n\n8种: null，undefined，boolean，number，string，Object，Symbol，BigInt\n\n\nSymbol 表示独一无二的值#\n\n 1. Symbol 接收一个参数表示对Symbol值的一种描述，const s1 = Symbol('foo')，\n\n 2. 传入相同的参数，生成的Symbol也不同\n\n 3. const s2 = Symbol.for('foo')方法会检测上文中是否已存在相同参数创建的Symbol，存在则返回该Symbol，不存在则新建\n\n最常见是在开源库内作为常量，比如用来自定义一个类型 比如 react源码内的 const REACT_ELEMENT =\nSymbol.for('react.element')\n\n或者是作为开源库内的 对象属性， Object.keys 和Object.getOwnPropertyNames 均不会返回Symbol，\n\nObject.getOwnPropertySymbols可以返回对象所有Symbol属性\n\n\nBigInt 用来表示大于 2^53-1 的整数#\n\nBigInt 真没怎么用过，只知道是用来表示 大于 2^53-1 的数的，末尾加n就行\n\n\n最大安全整数 2^53-1#\n\nJS没有整数类型，所有数字均以 双精度64位浮点格式 表示. 由 8Byte，64bit 组成。\n\nbit63 符号位, bits62-52 指数位(移码), bits51-0 尾数位.\n\n11位指数位, 52位尾数位, 最大尾数位拉满1, 再加上省略的默认整数位1, 可表示 53位1 即 2^53-1。\n\n大于52位尾数的数, 无法储存的位会被忽略，出现和小数一样的精度丢失情况，不同的数被储存后存在数与其完全相等。\n\n安全，代表精度没有损失，代表双精度展示 和 整数是一对一对应的的。\n\nNumber.MAX_SAFE_INTEGER Number.POSITIVE_INFINITY Number.MAX_VALUE Infinity\n\n> 计算机采用科学计数法储存数，科学计数法 与 原码 反码 补码 移码 计算机原理，大学学过。 二进制1 = 2^1-1，二进制 11 = 2^2-1,二进制\n> 111 = 2^3-1, 二进制 53位1 = 2^53-1 2^53 - 1 双精度64位浮点格式 默认整数位1, 加上52位尾数位全为 1，共\n> 53位1, 为最大安全整数 2^53 指数位储存53, 尾数位需要储存53个0, 但最后1位0被忽略, 能被JS正常储存 2^53 + 1\n> 指数位储存53，尾数位需要储存52个0, 和最后1位1被忽略, 因此与 2^53 相等。\n\n\n为什么 0.1 + 0.2 不等于 0.3#\n\n0.1和0.2转换成二进制后会无限循环\n\n尾数位数限制52位，再加上省略的一位，这53位是JS精度范围，需要将后面多余的位截掉\n\nhttps://juejin.cn/post/6844903680362151950\n\nhttps://xiaolincoding.com/os/1_hardware/float.html#_2-7-%E4%B8%BA%E4%BB%80%E4%B9\n%88-0-1-0-2-%E4%B8%8D%E7%AD%89%E4%BA%8E-0-3\n\n\n为什么 1Byte 是 8bit#\n\n一是因为ASCII规范，二是因为物理上 内存的最小管理单位就是8bit, 1元素 管理8个小电容。\n\n1B = 8b, Byte(字节) 是硬件能访问的最小单位, bit(位) 是 储存数据的最小单位\n\n计算机只认识01, 人类认识数字字母, 建立规范将数字字母与01对应, 将字母编码为01给计算机执行。\n\nASCII编码（全称American Standard Code for information Interchange 美国信息交换标准码）\n\n包含数字 字母 标点符号, 共计 128个, 2^7, 并扩容为 2^8, 8 bit, 1 Byte。\n\n\nnull 和 undefined区别#\n\nnull 表示值就是空，如原型链的终点\n\nundefined 表示尚未被赋值，却尝试读取，如变量声明，函数无返回值\n\n\n如何判断数据类型#\n\ntypeof instanceof toString\n\n\ntypeof 能判断8种基本类型 function#\n\ntypeof 能判断8种基本类型，及function类型，Object的衍生类型都只能返回object(全部小写字符串)\n\n\ninstanceof 能判断 实例 的 对象类型#\n\ninstanceof 能判断实例的对象类型，不能判断8种基本数据类型，原理是顺着原型链找，也就是prototype\n\nconsole.log(people1 instanceof People); // true\n\n\nObject.prototype.toString.call() 能判断所有内置类型#\n\nObject.prototype.toString.call([]); // [object Array](类型首字母大写)\r\n\r\nconst Xxx = {}\r\nObject.defineProperty(Xxx, Symbol.toStringTag, { value: 'Xxx' })\r\nObject.prototype.toString.call(Xxx); // [object Xxx]\r\nXxx.toString() // [object Xxx]\n\n\n\n如何判断变量为数组#\n\nconst arr = []\r\nArray.isArray(arr); // true\r\narr.__proto__ === Array.prototype; // true\r\narr instanceof Array; // true\r\nObject.prototype.toString.call([]).slice(8,-1) === 'Array' // true\n\n\n\n如何遍历对象属性#\n\n仅for/in返回 原型链属性，仅 Reflect.ownKeys()返回 Symbol Object.keys() 非继承，可枚举\nObject.getOwnPropertyNames() 非继承，可枚举，不可枚举 Reflect.ownKeys() 非继承，可枚举，不可枚举，Symbol\nfor ... in ... 继承，可枚举\n\n可枚举属性 指 enumerable 标志设置为 true 的属性\n\nObject.defineProperty定义的属性，enumerable 标志默认为 false\n\njs的内置方法和属性几乎都不可枚举\n\n\n如何判断两个对象是否相等#\n\n=== 与 == 的区别 : == 类型不同时会发生类型的自动转换，转换为相同的类型后再做比较\n\n\nObject.assign()/.create()#\n\nObject.assign() 将所有可枚举属性的值从一个或多个源对象复制到目标对象，并返回目标对象\n\nObject.create() 创建一个新对象，将第一个参数作为其原型链的原型，第二个参数为其属性配置。\n\n\n垃圾回收机制#\n\nJS垃圾回收机制就是 定期找出 不再用到的变量 释放其内存。\n\n不再用到的变量，即 对没有被其他对象引用到 的对象\n\n被引用， 即内被另一个对象访问到， 或称处于另一个对象的必备内， 包括 原型链 this链 作用域。\n\n缺点: 内存碎片化 分配速度慢，需要标记整理法\n\n\n内存泄漏#\n\n内存泄漏: 系统执行没用到的内存，却一直没释放。\n\n全局变量、定时器、回调函数、事件监听器、递归、console\n\n减少全局变量，使用完数据及时解除引用，理清代码逻辑减少逻辑嵌套\n\n\n事件委托#\n\n利用事件冒泡机制，将DOM事件在其父节点处注册的机制。\n\n多个事件只绑定一次，减少事件绑定，减少DOM交互次数\n\n抹平平台差异，浏览器兼容，ReactNative也可使用\n\n切片编程，统一进行事件处理，\n\n批量更新，交互触发多个事件状态变化，可进行一次更新。\n\n\nCommonJS AMD CMD UMD ES6Module#\n\nCommonJS(NodeJS): exports/require 模块作用域，同步加载，值的拷贝 AMD(RequireJS): define/require\n异步加载，加载完立即执行解析依 CMD(SeaJS): define/use 异步加载，需要的时候才执行依赖 UMD: 判断用的是哪种规范，再执行返回输出\nES6Module: export/import 异步加载，值的引用\n\n\n事件循环/宏任务和微任务#\n\n异步的一些 API，比如 setTimeout，setInterval，requestIdleCallback 和 requestAnimationFrame\n还有 Promise，这几个有什么区别？\n\n浏览器和node的\n\n\n闭包#\n\n理解闭包的产生比理解闭包的概念更重要，\n\n闭包的产生\n\n根据词法作用域规则，函数的作用域链由函数声明位置决定，声明位置在内部的函数总是可以访问外部函数的变量，\n\n即使内部函数的调用位置，不在其声明的外层函数内，甚至外部函数已经执行结束，\n\n但内部函数 引用的外部函数变量依旧保存在内存中，这些变量的集合称为闭包.\n\n闭包\n\n函数与其引用的外部函数词法环境的集合.（函数，自己内部的变量，外部词法环境，可访问的外部变量）\n\n闭包存在两种情况，一种是 内部函数正常在内部执行时，外部词法环境变量均存在，只要函数执行就存在闭包\n\n一种是 内部函数执行时外部函数执行上下文已被销毁，\n\n当外部函数已被销毁，内部函数 引用了的外部变量依旧会被保存，\n\n而 未被引用的外部变量 会通过 tree-shaking的方式 被销毁。\n\n\n关于重绘和重排#\n\n重绘：某些元素的外观被改变\n\n重排：局部或者整体布局发生改变，需要重新生成布局，重新排列元素。\n\n导致重排的场景：\n\n添加或删除可见的DOM元素\n\n元素的位置发生变化\n\n元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n\n内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代\n\n页面一开始渲染的时候（这避免不了）\n\n浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n\n如何减少重排：\n\n避免频繁操作样式\n\n减少重排范围，尽可能将样式加在具体元素上，而不是它的父级\n\n对于那些复杂的动画，对其设置 position: fixed/absolute，尽可能地使元素脱离文档流，从而减少对其他元素的影响\n\n动画样式启用GPU加速，transform、opacity、filters这些动画不会引起回流重绘\n\n\nhistory路由模式需后端配合#\n\nhistory模式下，url发生改变并刷新页面，浏览器会认为是请求了一个新的页面，发起http\n请求，而新的页面是不存在的（后端没配置的话），所以就会导致404。\n\nnginx 配置静态资源代理，告诉服务器返回什么静态文件。\n\nserver{      listen 8080;      server_name localhost;      root\n/usr/share/nginx/lhtml/dist;     try_files $uri /index.html; // 添加这一条 index\nindex.html; charset utf-8; }\n\n使用webpack解决本地运行\n\ndevServer:{  historyApiFallback:true }\n\n\nWeakMap弱引用 与 {}强引用#\n\nMap 和Weakmap 的区别\n\nWeakMap是ES6中新增的一种集合类型，叫做弱映射。它和Map是兄弟关系，与Map的区别在于这个弱字，API还是Map那套API。\n\nMap的键可以是任意类型，WeakMap只接受对象作为键，不接受其它类型的值作为键\n\nMap的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键；WeakMap的键是弱引用，如果创建了一个弱引用对象，不会被垃圾回收关注，如果不再需要，w\neakmap中的键名对象和所对应的键值对会自动消失，不再手动删除引用。\n\nMap可以被遍历，WeakMap不能被遍历\n\n\n导致js里this指向混乱的原因是什么?#\n\n\n0.1 + 0.2 !== 0.3，如何解决#\n\n\n写一个发布订阅模型#\n\n\n如何定位哪行js代码导致了页面刷新？#\n\n\n0.1 + 0.2 是否等于 0.3，如何解决？#\n\n\n数组的 sort 默认是按什么排序的？使用的什么算法？#\n\n\n如何终止JS程序的执行#\n\nJS由于其特殊的 JS运行机制 事件循环机制 ，没有设置exit函数，\n\n但是存在中断函数运行的方法，\n\n可以将整个脚本包裹为自执行函数，再 throw 或 return，\n\n上述两个方法都不能阻止异步任务的继续执行\n\n\n如何优化一个网站的性能#\n\n\n如何在前一个页面对下一个页面进行优化#\n\n\nJS常见手写#\n\n\n原型-作用域-this#\n\n\nPromise题#\n\n\ncall-apply-bind-new#","routePath":"/js/js-basic","lang":"","toc":[{"text":"一共有哪些数据类型","id":"一共有哪些数据类型","depth":2,"charIndex":-1},{"text":"Symbol 表示独一无二的值","id":"symbol-表示独一无二的值","depth":3,"charIndex":75},{"text":"BigInt 用来表示大于 2^53-1 的整数","id":"bigint-用来表示大于-253-1-的整数","depth":3,"charIndex":467},{"text":"最大安全整数 2^53-1","id":"最大安全整数-253-1","depth":3,"charIndex":-1},{"text":"为什么 0.1 + 0.2 不等于 0.3","id":"为什么-01--02-不等于-03","depth":2,"charIndex":1156},{"text":"为什么 1Byte 是 8bit","id":"为什么-1byte-是-8bit","depth":2,"charIndex":1416},{"text":"null 和 undefined区别","id":"null-和-undefined区别","depth":3,"charIndex":1718},{"text":"如何判断数据类型","id":"如何判断数据类型","depth":2,"charIndex":1799},{"text":"typeof 能判断8种基本类型 function","id":"typeof-能判断8种基本类型-function","depth":3,"charIndex":1839},{"text":"instanceof 能判断 实例 的 对象类型","id":"instanceof-能判断-实例-的-对象类型","depth":3,"charIndex":1930},{"text":"Object.prototype.toString.call() 能判断所有内置类型","id":"objectprototypetostringcall-能判断所有内置类型","depth":3,"charIndex":2066},{"text":"如何判断变量为数组","id":"如何判断变量为数组","depth":3,"charIndex":2347},{"text":"如何遍历对象属性","id":"如何遍历对象属性","depth":3,"charIndex":2549},{"text":"如何判断两个对象是否相等","id":"如何判断两个对象是否相等","depth":3,"charIndex":2836},{"text":"Object.assign()/.create()","id":"objectassigncreate","depth":3,"charIndex":2901},{"text":"垃圾回收机制","id":"垃圾回收机制","depth":2,"charIndex":3036},{"text":"内存泄漏","id":"内存泄漏","depth":3,"charIndex":3182},{"text":"事件委托","id":"事件委托","depth":2,"charIndex":3281},{"text":"CommonJS AMD CMD UMD ES6Module","id":"commonjs-amd-cmd-umd-es6module","depth":2,"charIndex":3420},{"text":"事件循环/宏任务和微任务","id":"事件循环宏任务和微任务","depth":2,"charIndex":3649},{"text":"闭包","id":"闭包","depth":2,"charIndex":3778},{"text":"关于重绘和重排","id":"关于重绘和重排","depth":2,"charIndex":4143},{"text":"history路由模式需后端配合","id":"history路由模式需后端配合","depth":2,"charIndex":4529},{"text":"WeakMap弱引用 与 {}强引用","id":"weakmap弱引用-与-强引用","depth":2,"charIndex":4890},{"text":"导致js里this指向混乱的原因是什么?","id":"导致js里this指向混乱的原因是什么","depth":2,"charIndex":5183},{"text":"0.1 + 0.2 !== 0.3，如何解决","id":"01--02--03如何解决","depth":2,"charIndex":5207},{"text":"写一个发布订阅模型","id":"写一个发布订阅模型","depth":2,"charIndex":5233},{"text":"如何定位哪行js代码导致了页面刷新？","id":"如何定位哪行js代码导致了页面刷新","depth":2,"charIndex":5246},{"text":"0.1 + 0.2 是否等于 0.3，如何解决？","id":"01--02-是否等于-03如何解决","depth":2,"charIndex":5268},{"text":"数组的 sort 默认是按什么排序的？使用的什么算法？","id":"数组的-sort-默认是按什么排序的使用的什么算法","depth":2,"charIndex":5296},{"text":"如何终止JS程序的执行","id":"如何终止js程序的执行","depth":2,"charIndex":5327},{"text":"如何优化一个网站的性能","id":"如何优化一个网站的性能","depth":2,"charIndex":5452},{"text":"如何在前一个页面对下一个页面进行优化","id":"如何在前一个页面对下一个页面进行优化","depth":2,"charIndex":5467},{"text":"JS常见手写","id":"js常见手写","depth":2,"charIndex":5489},{"text":"原型-作用域-this","id":"原型-作用域-this","depth":2,"charIndex":5499},{"text":"Promise题","id":"promise题","depth":2,"charIndex":5514},{"text":"call-apply-bind-new","id":"call-apply-bind-new","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"阅读杂记JS","date":"2022-05-10T05:51:23.000Z","categories":"技术栈","tags":["Javascript"]},"version":""},{"id":3,"title":"Overview","content":"","routePath":"/life/","lang":"","toc":[],"domain":"","frontmatter":{"overview":true,"title":"Overview"},"version":""},{"id":4,"title":"婚礼演讲稿","content":"大家好，额外增加一个我比较擅长的环节，讲ppt\n\n因为这场婚礼实际上我并没有出什么力，\n\n基本全靠我爸妈，---还有我爸妈，全身心付出，跑通每一个流程\n\n大家给点掌声，\n\n所以我想着，我也得做点什么，于是有了这个环节，我称之为年度汇报\n\n一鸣就不上来了，她比较害羞\n\n 1. 在第一个部分，我想给大家讲一讲我和一鸣的故事，从相知到相识，从求婚到结婚\n\n 2. 在第二个部分，我想感谢在座的各位，所有在现场的亲朋好友，\n\n 3. 在第三个部分，\n\n这个，内容可能有点多啊，我加快速度，讲快一点，不耽误吃饭\n\n【故事】\n\n好，第一个部分，我首先要公布一个 我爸妈，也不知道的消息\n\n我和一鸣其实谈了六年\n\n2019.7.15 - 2025.3.21 (巨大的字)\n\n是 2076 天 5.683 年\n\n【感谢】\n\n所以我觉得我真的很辛运\n\n【对一鸣说】","routePath":"/life/letter-to-love","lang":"","toc":[],"domain":"","frontmatter":{"title":"婚礼演讲稿","categories":"life"},"version":""},{"id":5,"title":"GitHub远程仓库连接配置","content":"无废话，GitHub远程仓库连接配置全流程及bug速通\n\n本文包含: 连接github远程仓库可能所需的\n\nSSH Key配置 443端口配置 hosts配置 git本地用户信息配置 npm镜像源配置 全流程\n\n\n0. 检查是否已有 SSH Key#\n\nls ~/.ssh 已存在则会看见输出内存在 id_rsa id_rsa.pub\n\n\n1.生成 SSH Key#\n\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 一路按回车\n\n\n2.复制公钥内容#\n\ncat ~/.ssh/id_rsa.pub 复制输出，即为公钥内容\n\n也可在 C:\\Users\\当前用户名\\.ssh 找到id_rsa.pub文件，记事本打开复制所有内容\n\n\n3.添加 SSH Key 到 Git 平台#\n\n右上角 头像 → Settings → 左侧 SSH and GPG keys\n\nTitle 随便填, Key 粘贴刚才复制的 id_rsa.pub 内容\n\n\n4. 测试是否成功连接#\n\nssh -T git@github.com 看见 Hi 开头， 圆满成功！\n\n首次连接会提示是否信任主机，输入 yes 即可。\n\n\n下面是可能碰见的问题#\n\n\ngit pull报错(连接github 22端口报错),修改端口#\n\nssh: connect to host github.com port 22: Connection refused\n\n原因: 你的计算机无法通过 SSH 协议（默认端口 22）连接到 github.com，这可能是 WIFI VPN 运营商 等在搞事情。\n\n解决: GitHub 提供了备用端口 443 ，修改 SSH 服务配置，改为请求 443端口.\n\n首先，找到 C:\\Users\\你的用户名\\.ssh 创建 config.txt, 记事本打开\n\n最后，复制粘贴以下内容，保存后，修改文件后缀删除.txt，使文件名变为 config，解决！\n\nHost github.com\r\n  HostName ssh.github.com\r\n  Port 443\r\n  User git\n\n\n\ngit pull报错(连接github 443端口也报错),修改hosts#\n\n现象: 当你通过上一节方案依旧无法连接github，且产生了以下报错\n\nssh: connect to host ssh.github.com port 443: Connection refused\n\n说明问题并不是22端口被封禁，那么可能遇到了 DNS 污染/劫持，常见于VPN用户\n\nssh -vT git@github.com 为证明该场景请测试该语句，如果获得以下类似输出，即为此场景\n\nOpenSSH_for_Windows_9.5p1, LibreSSL 3.8.2\r\ndebug1: Reading configuration data C:\\\\Users\\\\11143/.ssh/config\r\ndebug1: C:\\\\Users\\\\11143/.ssh/config line 1: Applying options for github.com\r\ndebug1: Connecting to ssh.github.com [::1] port 443.\r\ndebug1: connect to address ::1 port 443: Connection refused\r\ndebug1: Connecting to ssh.github.com [127.0.0.1] port 443.\r\ndebug1: connect to address 127.0.0.1 port 443: Connection refused\r\nssh: connect to host ssh.github.com port 443: Connection refused\n\n\nping github.com 或ping一下，如果获得以下类似输出，即为此场景\n\n正在 Ping github.com [::1] 具有 32 字节的数据:\r\n来自 ::1 的回复: 时间<1ms\r\n来自 ::1 的回复: 时间<1ms\r\n来自 ::1 的回复: 时间<1ms\r\n来自 ::1 的回复: 时间<1ms\n\n\n解决方案: 修改hosts\n\n * C:\\Windows\\System32\\drivers\\etc 路径，找到host文件 打开\n\n * 140.82.113.4 github.com 复制粘贴保存\n\n * ipconfig /flushdns 清除DNS缓存\n\n * ping github.com 再次ping，显示正常收到数据包，到这步已解决DNS问题！\n\n * ssh -T git@github.com 最后检查SSH链接\n\n * 如果报错 443: Connection refused 代表443端口被禁用，则删除上一节的配置文件\n\n * 如果报错 22: Connection refused 代表22端口被禁用，则使用上一节的配置文件\n\n解决！\n\n\ngit commit报错#\n\n如果你看到类似以下报错, 按照提示运行那两行config代码就行, 双引号内内容改成自己的\n\n*** Please tell me who you are.\r\n\r\nRun\r\n\r\n  git config --global user.email \"you@example.com\"\r\n  git config --global user.name \"Your Name\"\r\n\r\nto set your account's default identity.\r\nOmit --global to set the identity only in this repository.\r\n\r\nfatal: unable to auto-detect email address\n\n\n\nnpm install 下载时速度慢#\n\n使用nrm设置taobao镜像源\n\nnpm install -g nrm\n\nnrm use taobao\n\n\n后续遇见其他问题待更新#\n\n经常装机/重装系统，拉取github项目出问题有印象却总不记得具体指令。\n\n这次记录下来，以后一文速通。","routePath":"/others/github-remote-setup","lang":"","toc":[{"text":"0. 检查是否已有 SSH Key","id":"0-检查是否已有-ssh-key","depth":2,"charIndex":106},{"text":"1.生成 SSH Key","id":"1生成-ssh-key","depth":2,"charIndex":169},{"text":"2.复制公钥内容","id":"2复制公钥内容","depth":2,"charIndex":246},{"text":"3.添加 SSH Key 到 Git 平台","id":"3添加-ssh-key-到-git-平台","depth":2,"charIndex":345},{"text":"4. 测试是否成功连接","id":"4-测试是否成功连接","depth":2,"charIndex":449},{"text":"下面是可能碰见的问题","id":"下面是可能碰见的问题","depth":2,"charIndex":529},{"text":"`git pull`报错(连接github 22端口报错),修改端口","id":"git-pull报错连接github-22端口报错修改端口","depth":2,"charIndex":-1},{"text":"`git pull`报错(连接github 443端口也报错),修改hosts","id":"git-pull报错连接github-443端口也报错修改hosts","depth":2,"charIndex":-1},{"text":"`git commit`报错","id":"git-commit报错","depth":2,"charIndex":-1},{"text":"`npm install` 下载时速度慢","id":"npm-install-下载时速度慢","depth":2,"charIndex":-1},{"text":"后续遇见其他问题待更新","id":"后续遇见其他问题待更新","depth":2,"charIndex":2582}],"domain":"","frontmatter":{"title":"GitHub远程仓库连接配置"},"version":""},{"id":6,"title":"Overview","content":"","routePath":"/others/","lang":"","toc":[],"domain":"","frontmatter":{"title":"Overview","overview":true},"version":""}]